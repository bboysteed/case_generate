b'--allow-coverage-fail false\n--appp 0.33333\n--asm-code-only false\n--best-edit-rule "1 * fault_loc_weight ; 1 * max_test_fail_prob ; -1 * num_tests"\n--best-test-rule "1 * test_fail_prob ; 1 * test_fail_count ; -1 * test_pass_count"\n--compiler "gcc"\n--compiler-command ""\n--compiler-opts "-lm"\n--continue false\n--coverage-info ""\n--coverage-per-test false\n--crossover "one"\n--crossp 0.5\n--delp 0.33333\n--describe-machine false\n--diversity-selection 0\n--edit-script false\n--elf-risc false\n--exclude-edits ""\n--exp-diff false\n--fault-file ""\n--fault-path "coverage.path.neg"\n--fault-scheme "path"\n--fitness-in-parallel 1\n--fix-file ""\n--fix-oracle ""\n--fix-path "coverage.path.pos"\n--fix-scheme "default"\n--flatten-path ""\n--format "txt"\n--gen-per-exchange 1\n--generations 10\n--gui false\n--hostname "127.0.0.1"\n--ignore-dead-code true\n--ignore-equiv-appends true\n--ignore-standard-headers true\n--ignore-string-equiv-fixes true\n--ignore-untyped-returns true\n--incoming-pop ""\n--keep-source true\n--label-repair false\n--max-evals 0\n--minimization false\n--mt-cov false\n--multiopt-minimize false\n--multiopt-no-inf false\n--neg-tests 4\n--neg-weight 1\n--negative-test-weight 2\n--neutral-walk-max-size 0\n--neutral-walk-weight ""\n--nht-id "global"\n--nht-port 51000\n--nht-server ""\n--no-rep-cache true\n--no-test-cache false\n--num-comps 2\n--num-objectives 2\n--oracle-genome ""\n--popsize 40\n--port 60000\n--pos-tests 4\n--pos-weight 0.1\n--prefix "./"\n--preprocessor ""\n--print-incremental-evals false\n--print-source-name false\n--program "/home/tedks/tmp/fe9d5fb933c758c2cbbd859e3ecbd2d2eaecc2843b57cfd97da99af24de59f189a144d13ce81ec585d7c2f7367f70c0fb2aec8269eed1fd8380def614817ef7c_f3916cfae180e069a6f99e95c35d654f309e56e3_smallest-merged.c"\n--promut 1\n--quiet false\n--regen-paths false\n--rep ""\n--rep-cache ""\n--repp 0\n--samp-strat "variant"\n--sample 1\n--sample-runs 100\n--sanity "yes"\n--search "ww"\n--seed 3332782029167834594\n--semantic-check "scope"\n--single-fitness false\n--skip-failed-sanity-tests false\n--skip-tests ""\n--split-search 0\n--sport 65000\n--subatom-constp 0.5\n--subatom-mutp 0\n--super-mutant true\n--super-mutant-size 50\n--swap-bug false\n--swapp 0.33333\n--template-cache ""\n--templates ""\n--test-command ""\n--test-script "/home/tedks/tmp/fe9d5fb933c758c2cbbd859e3ecbd2d2eaecc2843b57cfd97da99af24de59f189a144d13ce81ec585d7c2f7367f70c0fb2aec8269eed1fd8380def614817ef7c_1_f3916cfae180e069a6f99e95c35d654f309e56e3_smallest_19774717762186898500385888832/test_19774717762186898500385888832"\n--tournament-size 2\n--tweet false\n--uniq false\n--valgrind false\n--variants-exchanged 50\ncilRep: preprocessing IO function signatures: /home/tedks/tmp/tmpf0beb0.c /home/tedks/tmp/tmp5a0ade.c\ncilRep: done preprocessing IO function signatures\ncilrep: from_source: pre: stmt_count = 1\ncilRep: /home/tedks/tmp/fe9d5fb933c758c2cbbd859e3ecbd2d2eaecc2843b57cfd97da99af24de59f189a144d13ce81ec585d7c2f7367f70c0fb2aec8269eed1fd8380def614817ef7c_f3916cfae180e069a6f99e95c35d654f309e56e3_smallest-merged.c: parsing\ncilRep: /home/tedks/tmp/fe9d5fb933c758c2cbbd859e3ecbd2d2eaecc2843b57cfd97da99af24de59f189a144d13ce81ec585d7c2f7367f70c0fb2aec8269eed1fd8380def614817ef7c_f3916cfae180e069a6f99e95c35d654f309e56e3_smallest-merged.c: parsed (0.0247755 MB)\ncilRep: computing liveness\ncilRep: computed liveness\ncilrep: from_source: post: stmt_count: 6\ncachingRepresentation: sanity checking begins\n\tp1: true (1)\n\tp2: true (1)\n\tp3: true (1)\n\tp4: true (1)\n\tn1: false (0)\n\tn2: false (0)\n\tn3: false (0)\n\tn4: false (0)\ncachingRepresentation: sanity checking passed (time_taken = 0.493518)\nfaultLocRep: compute_localization: fault_scheme: path, fix_scheme: default\nRep: coverage_sourcename: /home/tedks/tmp/fe9d5fb933c758c2cbbd859e3ecbd2d2eaecc2843b57cfd97da99af24de59f189a144d13ce81ec585d7c2f7367f70c0fb2aec8269eed1fd8380def614817ef7c_1_f3916cfae180e069a6f99e95c35d654f309e56e3_smallest_19774717762186898500385888832/./coverage.c\ncilRep: instrumenting for fault localization\ncilRep: done instrumenting for fault localization\ncoverage negative:\n\ttest: 1\n\ttest: 2\n\ttest: 3\n\ttest: 4\ncoverage positive:\n\ttest: 1\n\ttest: 2\n\ttest: 3\n\ttest: 4\ncilRep: /home/tedks/tmp/fe9d5fb933c758c2cbbd859e3ecbd2d2eaecc2843b57cfd97da99af24de59f189a144d13ce81ec585d7c2f7367f70c0fb2aec8269eed1fd8380def614817ef7c_f3916cfae180e069a6f99e95c35d654f309e56e3_smallest-merged.cache: saved\ncachingRep: /home/tedks/tmp/fe9d5fb933c758c2cbbd859e3ecbd2d2eaecc2843b57cfd97da99af24de59f189a144d13ce81ec585d7c2f7367f70c0fb2aec8269eed1fd8380def614817ef7c_f3916cfae180e069a6f99e95c35d654f309e56e3_smallest-merged.cache: saved\nfaultlocRep: /home/tedks/tmp/fe9d5fb933c758c2cbbd859e3ecbd2d2eaecc2843b57cfd97da99af24de59f189a144d13ce81ec585d7c2f7367f70c0fb2aec8269eed1fd8380def614817ef7c_f3916cfae180e069a6f99e95c35d654f309e56e3_smallest-merged.cache: saved\ncilrep done serialize\ncilRep: stmt_count = 6\ncilRep: stmts in weighted_path = 5\ncilRep: total weight = 1.4\ncilRep: stmts in weighted_path with weight >= 1.0 = 1\ncilRep: /home/tedks/tmp/fe9d5fb933c758c2cbbd859e3ecbd2d2eaecc2843b57cfd97da99af24de59f189a144d13ce81ec585d7c2f7367f70c0fb2aec8269eed1fd8380def614817ef7c_f3916cfae180e069a6f99e95c35d654f309e56e3_smallest-merged.c (code bank/base file; atoms [1,6])\ncilRep: 1 file(s) total in representation\nsearch: ww_adaptive_1 begins (time = 1430855544.229376)\ncilRep: coverage ignores: /usr/lib/gcc/x86_64-linux-gnu/4.9/include\ncilRep: coverage ignores: /usr/local/include\ncilRep: coverage ignores: /usr/lib/gcc/x86_64-linux-gnu/4.9/include-fixed\ncilRep: coverage ignores: /usr/include\ncilRep: atoms in standard headers: 0\ncilRep: fix-space quotient by string: 6 -> 5\nprogeq: computing alias analysis information\nsearch: fix space reduced (time_taken = 0.0406229)\nexcluded 0 deletes (from list of 0 total edits)\nsearch: ww_adaptive: 5 deletes\nexcluded 0 appends (from list of 0 total edits)\nsearch: ww_adaptive: 16 appends\nsearch: ww_adaptive: 21 possible edits\nsearch: ready to start (time_taken = 0.00920105)\nsearch: ww_adaptive: finding best\n\tfrom new super-mutant\nsearch: ww_adaptive: finding 50 best for super-mutant\nrep: WARNING: test_visiting_atoms: no data available\n\ttry using --coverage-per-test and/or --regen-paths\n\tdefaulting to \'all tests\'\nsearch: ww_adaptive: found 21 best (time_taken = 0.00129509)\nsearch: ww_adaptive: found best (time_taken = 0.000261068)\n\tvariant     1/   21 = ?(1,d(3)) ?(2,d(4)) ?(3,d(5)) ?(4,d(6)) ?(5,a(5,6)) ?(6,a(5,5)) ?(7,a(5,4)) ?(8,a(5,3)) ?(9,a(5,2)) ?(10,a(4,5)) ?(11,a(4,4)) ?(12,a(4,3)) ?(13,a(3,5)) ?(14,a(3,4)) ?(15,a(3,3)) ?(16,d(2)) ?(17,a(2,6)) ?(18,a(2,5)) ?(19,a(2,4)) ?(20,a(2,3)) ?(21,a(2,2))  (8 tests, cond 16)\n\t\tn1 false (test_time = 0.147058)\nsearch: ww_adaptive: finding best\n\tfrom existing super-mutants\nsearch: ww_adaptive: found best (time_taken = 0.000184059)\n\tvariant     2/   21 = ?(1,d(3)) ?(2,d(4)) ?(3,d(5)) ?(4,d(6)) ?(5,a(5,6)) ?(6,a(5,5)) ?(7,a(5,4)) ?(8,a(5,3)) ?(9,a(5,2)) ?(10,a(4,5)) ?(11,a(4,4)) ?(12,a(4,3)) ?(13,a(3,5)) ?(14,a(3,4)) ?(15,a(3,3)) ?(16,d(2)) ?(17,a(2,6)) ?(18,a(2,5)) ?(19,a(2,4)) ?(20,a(2,3)) ?(21,a(2,2))  (8 tests, cond 21)\n\t\tn1 false (test_time = 0.053782)\nsearch: ww_adaptive: finding best\n\tfrom existing super-mutants\nsearch: ww_adaptive: found best (time_taken = 0.00019002)\n\tvariant     3/   21 = ?(1,d(3)) ?(2,d(4)) ?(3,d(5)) ?(4,d(6)) ?(5,a(5,6)) ?(6,a(5,5)) ?(7,a(5,4)) ?(8,a(5,3)) ?(9,a(5,2)) ?(10,a(4,5)) ?(11,a(4,4)) ?(12,a(4,3)) ?(13,a(3,5)) ?(14,a(3,4)) ?(15,a(3,3)) ?(16,d(2)) ?(17,a(2,6)) ?(18,a(2,5)) ?(19,a(2,4)) ?(20,a(2,3)) ?(21,a(2,2))  (8 tests, cond 20)\n\t\tn1 false (test_time = 0.0509861)\nsearch: ww_adaptive: finding best\n\tfrom existing super-mutants\nsearch: ww_adaptive: found best (time_taken = 0.000166893)\n\tvariant     4/   21 = ?(1,d(3)) ?(2,d(4)) ?(3,d(5)) ?(4,d(6)) ?(5,a(5,6)) ?(6,a(5,5)) ?(7,a(5,4)) ?(8,a(5,3)) ?(9,a(5,2)) ?(10,a(4,5)) ?(11,a(4,4)) ?(12,a(4,3)) ?(13,a(3,5)) ?(14,a(3,4)) ?(15,a(3,3)) ?(16,d(2)) ?(17,a(2,6)) ?(18,a(2,5)) ?(19,a(2,4)) ?(20,a(2,3)) ?(21,a(2,2))  (8 tests, cond 19)\n\t\tn1 false (test_time = 0.0508561)\nsearch: ww_adaptive: finding best\n\tfrom existing super-mutants\nsearch: ww_adaptive: found best (time_taken = 0.000133038)\n\tvariant     5/   21 = ?(1,d(3)) ?(2,d(4)) ?(3,d(5)) ?(4,d(6)) ?(5,a(5,6)) ?(6,a(5,5)) ?(7,a(5,4)) ?(8,a(5,3)) ?(9,a(5,2)) ?(10,a(4,5)) ?(11,a(4,4)) ?(12,a(4,3)) ?(13,a(3,5)) ?(14,a(3,4)) ?(15,a(3,3)) ?(16,d(2)) ?(17,a(2,6)) ?(18,a(2,5)) ?(19,a(2,4)) ?(20,a(2,3)) ?(21,a(2,2))  (8 tests, cond 18)\n\t\tn1 false (test_time = 0.0525851)\nsearch: ww_adaptive: finding best\n\tfrom existing super-mutants\nsearch: ww_adaptive: found best (time_taken = 7.00951e-05)\n\tvariant     6/   21 = ?(1,d(3)) ?(2,d(4)) ?(3,d(5)) ?(4,d(6)) ?(5,a(5,6)) ?(6,a(5,5)) ?(7,a(5,4)) ?(8,a(5,3)) ?(9,a(5,2)) ?(10,a(4,5)) ?(11,a(4,4)) ?(12,a(4,3)) ?(13,a(3,5)) ?(14,a(3,4)) ?(15,a(3,3)) ?(16,d(2)) ?(17,a(2,6)) ?(18,a(2,5)) ?(19,a(2,4)) ?(20,a(2,3)) ?(21,a(2,2))  (8 tests, cond 17)\n\t\tn1 false (test_time = 0.0509641)\nsearch: ww_adaptive: finding best\n\tfrom existing super-mutants\nsearch: ww_adaptive: found best (time_taken = 0.000232935)\n\tvariant     7/   21 = ?(1,d(3)) ?(2,d(4)) ?(3,d(5)) ?(4,d(6)) ?(5,a(5,6)) ?(6,a(5,5)) ?(7,a(5,4)) ?(8,a(5,3)) ?(9,a(5,2)) ?(10,a(4,5)) ?(11,a(4,4)) ?(12,a(4,3)) ?(13,a(3,5)) ?(14,a(3,4)) ?(15,a(3,3)) ?(16,d(2)) ?(17,a(2,6)) ?(18,a(2,5)) ?(19,a(2,4)) ?(20,a(2,3)) ?(21,a(2,2))  (8 tests, cond 15)\n\t\tn1 false (test_time = 0.0495081)\nsearch: ww_adaptive: finding best\n\tfrom existing super-mutants\nsearch: ww_adaptive: found best (time_taken = 0.000350952)\n\tvariant     8/   21 = ?(1,d(3)) ?(2,d(4)) ?(3,d(5)) ?(4,d(6)) ?(5,a(5,6)) ?(6,a(5,5)) ?(7,a(5,4)) ?(8,a(5,3)) ?(9,a(5,2)) ?(10,a(4,5)) ?(11,a(4,4)) ?(12,a(4,3)) ?(13,a(3,5)) ?(14,a(3,4)) ?(15,a(3,3)) ?(16,d(2)) ?(17,a(2,6)) ?(18,a(2,5)) ?(19,a(2,4)) ?(20,a(2,3)) ?(21,a(2,2))  (8 tests, cond 14)\n\t\tn1 false (test_time = 0.0491471)\nsearch: ww_adaptive: finding best\n\tfrom existing super-mutants\nsearch: ww_adaptive: found best (time_taken = 0.000203133)\n\tvariant     9/   21 = ?(1,d(3)) ?(2,d(4)) ?(3,d(5)) ?(4,d(6)) ?(5,a(5,6)) ?(6,a(5,5)) ?(7,a(5,4)) ?(8,a(5,3)) ?(9,a(5,2)) ?(10,a(4,5)) ?(11,a(4,4)) ?(12,a(4,3)) ?(13,a(3,5)) ?(14,a(3,4)) ?(15,a(3,3)) ?(16,d(2)) ?(17,a(2,6)) ?(18,a(2,5)) ?(19,a(2,4)) ?(20,a(2,3)) ?(21,a(2,2))  (8 tests, cond 13)\n\t\tn1 false (test_time = 0.053282)\nsearch: ww_adaptive: finding best\n\tfrom existing super-mutants\nsearch: ww_adaptive: found best (time_taken = 0.000211)\n\tvariant    10/   21 = ?(1,d(3)) ?(2,d(4)) ?(3,d(5)) ?(4,d(6)) ?(5,a(5,6)) ?(6,a(5,5)) ?(7,a(5,4)) ?(8,a(5,3)) ?(9,a(5,2)) ?(10,a(4,5)) ?(11,a(4,4)) ?(12,a(4,3)) ?(13,a(3,5)) ?(14,a(3,4)) ?(15,a(3,3)) ?(16,d(2)) ?(17,a(2,6)) ?(18,a(2,5)) ?(19,a(2,4)) ?(20,a(2,3)) ?(21,a(2,2))  (8 tests, cond 12)\n\t\tn1 false (test_time = 0.0551059)\nsearch: ww_adaptive: finding best\n\tfrom existing super-mutants\nsearch: ww_adaptive: found best (time_taken = 0.00027895)\n\tvariant    11/   21 = ?(1,d(3)) ?(2,d(4)) ?(3,d(5)) ?(4,d(6)) ?(5,a(5,6)) ?(6,a(5,5)) ?(7,a(5,4)) ?(8,a(5,3)) ?(9,a(5,2)) ?(10,a(4,5)) ?(11,a(4,4)) ?(12,a(4,3)) ?(13,a(3,5)) ?(14,a(3,4)) ?(15,a(3,3)) ?(16,d(2)) ?(17,a(2,6)) ?(18,a(2,5)) ?(19,a(2,4)) ?(20,a(2,3)) ?(21,a(2,2))  (8 tests, cond 11)\n\t\tn1 false (test_time = 0.0545571)\nsearch: ww_adaptive: finding best\n\tfrom existing super-mutants\nsearch: ww_adaptive: found best (time_taken = 0.000257015)\n\tvariant    12/   21 = ?(1,d(3)) ?(2,d(4)) ?(3,d(5)) ?(4,d(6)) ?(5,a(5,6)) ?(6,a(5,5)) ?(7,a(5,4)) ?(8,a(5,3)) ?(9,a(5,2)) ?(10,a(4,5)) ?(11,a(4,4)) ?(12,a(4,3)) ?(13,a(3,5)) ?(14,a(3,4)) ?(15,a(3,3)) ?(16,d(2)) ?(17,a(2,6)) ?(18,a(2,5)) ?(19,a(2,4)) ?(20,a(2,3)) ?(21,a(2,2))  (8 tests, cond 10)\n\t\tn1 false (test_time = 0.0580258)\nsearch: ww_adaptive: finding best\n\tfrom existing super-mutants\nsearch: ww_adaptive: found best (time_taken = 0.000157833)\n\tvariant    13/   21 = ?(1,d(3)) ?(2,d(4)) ?(3,d(5)) ?(4,d(6)) ?(5,a(5,6)) ?(6,a(5,5)) ?(7,a(5,4)) ?(8,a(5,3)) ?(9,a(5,2)) ?(10,a(4,5)) ?(11,a(4,4)) ?(12,a(4,3)) ?(13,a(3,5)) ?(14,a(3,4)) ?(15,a(3,3)) ?(16,d(2)) ?(17,a(2,6)) ?(18,a(2,5)) ?(19,a(2,4)) ?(20,a(2,3)) ?(21,a(2,2))  (8 tests, cond 9)\n\t\tn1 false (test_time = 0.05514)\nsearch: ww_adaptive: finding best\n\tfrom existing super-mutants\nsearch: ww_adaptive: found best (time_taken = 0.000189066)\n\tvariant    14/   21 = ?(1,d(3)) ?(2,d(4)) ?(3,d(5)) ?(4,d(6)) ?(5,a(5,6)) ?(6,a(5,5)) ?(7,a(5,4)) ?(8,a(5,3)) ?(9,a(5,2)) ?(10,a(4,5)) ?(11,a(4,4)) ?(12,a(4,3)) ?(13,a(3,5)) ?(14,a(3,4)) ?(15,a(3,3)) ?(16,d(2)) ?(17,a(2,6)) ?(18,a(2,5)) ?(19,a(2,4)) ?(20,a(2,3)) ?(21,a(2,2))  (8 tests, cond 8)\n\t\tn1 false (test_time = 0.0502901)\nsearch: ww_adaptive: finding best\n\tfrom existing super-mutants\nsearch: ww_adaptive: found best (time_taken = 0.00011301)\n\tvariant    15/   21 = ?(1,d(3)) ?(2,d(4)) ?(3,d(5)) ?(4,d(6)) ?(5,a(5,6)) ?(6,a(5,5)) ?(7,a(5,4)) ?(8,a(5,3)) ?(9,a(5,2)) ?(10,a(4,5)) ?(11,a(4,4)) ?(12,a(4,3)) ?(13,a(3,5)) ?(14,a(3,4)) ?(15,a(3,3)) ?(16,d(2)) ?(17,a(2,6)) ?(18,a(2,5)) ?(19,a(2,4)) ?(20,a(2,3)) ?(21,a(2,2))  (8 tests, cond 7)\n\t\tn1 false (test_time = 0.048892)\nsearch: ww_adaptive: finding best\n\tfrom existing super-mutants\nsearch: ww_adaptive: found best (time_taken = 0.000117064)\n\tvariant    16/   21 = ?(1,d(3)) ?(2,d(4)) ?(3,d(5)) ?(4,d(6)) ?(5,a(5,6)) ?(6,a(5,5)) ?(7,a(5,4)) ?(8,a(5,3)) ?(9,a(5,2)) ?(10,a(4,5)) ?(11,a(4,4)) ?(12,a(4,3)) ?(13,a(3,5)) ?(14,a(3,4)) ?(15,a(3,3)) ?(16,d(2)) ?(17,a(2,6)) ?(18,a(2,5)) ?(19,a(2,4)) ?(20,a(2,3)) ?(21,a(2,2))  (8 tests, cond 6)\n\t\tn1 false (test_time = 0.0507059)\nsearch: ww_adaptive: finding best\n\tfrom existing super-mutants\nsearch: ww_adaptive: found best (time_taken = 0.000119925)\n\tvariant    17/   21 = ?(1,d(3)) ?(2,d(4)) ?(3,d(5)) ?(4,d(6)) ?(5,a(5,6)) ?(6,a(5,5)) ?(7,a(5,4)) ?(8,a(5,3)) ?(9,a(5,2)) ?(10,a(4,5)) ?(11,a(4,4)) ?(12,a(4,3)) ?(13,a(3,5)) ?(14,a(3,4)) ?(15,a(3,3)) ?(16,d(2)) ?(17,a(2,6)) ?(18,a(2,5)) ?(19,a(2,4)) ?(20,a(2,3)) ?(21,a(2,2))  (8 tests, cond 5)\n\t\tn1 false (test_time = 0.0525241)\nsearch: ww_adaptive: finding best\n\tfrom existing super-mutants\nsearch: ww_adaptive: found best (time_taken = 7.48634e-05)\n\tvariant    18/   21 = ?(1,d(3)) ?(2,d(4)) ?(3,d(5)) ?(4,d(6)) ?(5,a(5,6)) ?(6,a(5,5)) ?(7,a(5,4)) ?(8,a(5,3)) ?(9,a(5,2)) ?(10,a(4,5)) ?(11,a(4,4)) ?(12,a(4,3)) ?(13,a(3,5)) ?(14,a(3,4)) ?(15,a(3,3)) ?(16,d(2)) ?(17,a(2,6)) ?(18,a(2,5)) ?(19,a(2,4)) ?(20,a(2,3)) ?(21,a(2,2))  (8 tests, cond 4)\n\t\tn1 false (test_time = 0.053385)\nsearch: ww_adaptive: finding best\n\tfrom existing super-mutants\nsearch: ww_adaptive: found best (time_taken = 5.6982e-05)\n\tvariant    19/   21 = ?(1,d(3)) ?(2,d(4)) ?(3,d(5)) ?(4,d(6)) ?(5,a(5,6)) ?(6,a(5,5)) ?(7,a(5,4)) ?(8,a(5,3)) ?(9,a(5,2)) ?(10,a(4,5)) ?(11,a(4,4)) ?(12,a(4,3)) ?(13,a(3,5)) ?(14,a(3,4)) ?(15,a(3,3)) ?(16,d(2)) ?(17,a(2,6)) ?(18,a(2,5)) ?(19,a(2,4)) ?(20,a(2,3)) ?(21,a(2,2))  (8 tests, cond 3)\n\t\tn1 false (test_time = 0.053879)\nsearch: ww_adaptive: finding best\n\tfrom existing super-mutants\nsearch: ww_adaptive: found best (time_taken = 5.6982e-05)\n\tvariant    20/   21 = ?(1,d(3)) ?(2,d(4)) ?(3,d(5)) ?(4,d(6)) ?(5,a(5,6)) ?(6,a(5,5)) ?(7,a(5,4)) ?(8,a(5,3)) ?(9,a(5,2)) ?(10,a(4,5)) ?(11,a(4,4)) ?(12,a(4,3)) ?(13,a(3,5)) ?(14,a(3,4)) ?(15,a(3,3)) ?(16,d(2)) ?(17,a(2,6)) ?(18,a(2,5)) ?(19,a(2,4)) ?(20,a(2,3)) ?(21,a(2,2))  (8 tests, cond 2)\n\t\tn1 false (test_time = 0.0550261)\nsearch: ww_adaptive: finding best\n\tfrom existing super-mutants\nsearch: ww_adaptive: found best (time_taken = 5.96046e-06)\n\tvariant    21/   21 = ?(1,d(3)) ?(2,d(4)) ?(3,d(5)) ?(4,d(6)) ?(5,a(5,6)) ?(6,a(5,5)) ?(7,a(5,4)) ?(8,a(5,3)) ?(9,a(5,2)) ?(10,a(4,5)) ?(11,a(4,4)) ?(12,a(4,3)) ?(13,a(3,5)) ?(14,a(3,4)) ?(15,a(3,3)) ?(16,d(2)) ?(17,a(2,6)) ?(18,a(2,5)) ?(19,a(2,4)) ?(20,a(2,3)) ?(21,a(2,2))  (8 tests, cond 1)\n\t\tn1 false (test_time = 0.0534739)\nsearch: ww_adaptive: ends (no repair)\nRep: saving test cache\n\nVariant Test Case Queries: 21\n"Test Suite Evaluations": 2.625\n\nCompile Failures: 0\nWall-Clock Seconds Elapsed: 2.38906\n  Activity Name                     Count Seconds = Percent of Total Time\n  progeq partition                      5   0.000 = 0.0192725%\n  find_k_best_edits                     1   0.001 = 0.059801%\n  find_best_edit                       21   0.003 = 0.154863%\n  sanity_check                          1   0.005 = 0.228593%\n  append_sources                        5   0.009 = 0.41615%\n  compile                               3   0.249 = 11.506%\n  test                                 37   1.896 = 87.6153%\n  TOTAL                                     2.164 = 90.293% (avg CPU usage)\n'